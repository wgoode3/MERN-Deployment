{"version":3,"sources":["Components/TaskForm.js","Components/TaskList.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["TaskForm","props","useState","task","setTask","onSubmit","e","preventDefault","newTask","isCompleted","axios","post","then","res","console","log","addTask","data","className","onChange","target","value","type","placeholder","autoFocus","TaskList","todos","setTodos","active","setActive","setActiveLink","undefined","filter","t","useEffect","onClick","href","map","todo","i","key","_id","data-id","setCompleted","defaultChecked","Main","tasks","setTasks","get","catch","err","item","temp","put","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c99842cd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\n\nconst TaskForm = props => {\n\n  const [task, setTask] = useState(\"\");\n\n  const create = e => {\n    e.preventDefault();\n    let newTask = {task: task, isCompleted: false};\n    axios.post(\"http://localhost:8000/api/todos\", newTask)\n      .then(res => {\n        console.log(res);\n        props.addTask(res.data);\n      })\n    setTask(\"\");\n  }\n\n  return (\n    <form onSubmit={ create }>\n      <div className=\"column\">\n        <div className=\"level\">\n          <div className=\"level-item\">\n            <p className=\"subtitle is-4\">New Task:</p>\n          </div>\n          <div className=\"level-item control has-icons-left\">\n            <input onChange={e=>setTask(e.target.value)}\n              value={task}\n              type=\"text\"\n              placeholder=\"Your task\"\n              className=\"input\"\n              autoFocus\n            />\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-briefcase\"></i>\n            </span>\n          </div>\n\n          <div className=\"level-item\">\n            <input type=\"submit\" \n              value=\"New Task\" \n              className=\"button is-primary\"\n            />\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default TaskForm;","import React, { useState, useEffect } from 'react';\n\n\nconst TaskList = props => {\n\n  const [todos, setTodos] = useState([]);\n  const [active, setActive] = useState(\"all\");\n\n  const setActiveLink = (e, type) => {\n    e.preventDefault();\n    type !== undefined ? setActive(type) : type = active;\n    switch(type){\n      case \"completed\":\n        setTodos(props.todos.filter(t => t.isCompleted));\n        break;\n      case \"active\":\n        setTodos(props.todos.filter(t => !t.isCompleted));\n        break;\n      default:\n        setTodos(props.todos);\n    }\n  }\n\n  useEffect( () => {\n    setTodos(props.todos);\n    // setActiveLink({preventDefault: function(){}});\n  }, [props.todos]);\n\n  return (\t\n    <div>\n      <div className=\"tabs is-centered is-boxed\">\n        <ul>\n          <li className={active===\"all\" ? \"is-active\": \"\"} >\n              <a onClick={ e => setActiveLink(e, \"all\") } href=\"#!\">\n                all\n            </a>\n          </li>\n          <li className={active===\"completed\" ? \"is-active\": \"\"} >\n            <a onClick={ e => setActiveLink(e, \"completed\") } href=\"#!\">\n              completed\n            </a>\n          </li>\n          <li className={active===\"active\" ? \"is-active\": \"\"} >\n            <a onClick={ e => setActiveLink(e, \"active\") } href=\"#!\">\n              active\n            </a>\n          </li>\n        </ul>\n      </div>\n      <table className=\"table is-fullwidth is-hoverable is-striped\">\n        <thead>\n          <tr>\n            <th>status</th>\n            <th>task</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            todos.map( (todo, i) => \n              <tr key={ todo._id }>\n                <td \n                  className=\"clickable\" \n                  data-id={todo._id} \n                  onClick={ e => props.setCompleted(i) }\n                >\n                  { \n                    todo.isCompleted ? \n                    <div className=\"tags has-addons\">\n                      <span className=\"tag is-light\">\n                        <input type=\"checkbox\" defaultChecked />\n                      </span>\n                      <span className=\"tag is-success\">completed</span>\n                    </div> : \n                    <div className=\"tags has-addons\">\n                      <span className=\"tag is-light\">\n                        <input type=\"checkbox\" />\n                      </span>\n                      <span className=\"tag is-danger is-small\">active</span>\n                    </div> \n                  }\n                </td>\n                <td>{ todo.task }</td>\n            </tr>\n            )\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default TaskList;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TaskForm from './TaskForm';\nimport TaskList from './TaskList';\n\n\nconst Main = props => {\n  \n  const [tasks, setTasks] = useState([]);\n\n  useEffect( () => {\n    axios.get('http://localhost:8000/api/todos')\n      .then(res => setTasks(res.data))\n      .catch(err => console.log(\"cannot get tasks :(\", err));\n  }, []);\n\n  const setCompleted = i => {\n    let temp = [...tasks];\n    temp[i].isCompleted = !temp[i].isCompleted;\n    setTasks(temp);\n    axios.put(`http://localhost:8000/api/todos/${temp[i]._id}`, temp[i])\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n  }\n\n  const addToDo = item => {\n    setTasks([...tasks, item]);\n  }\n  \n  return (\n    <section className=\"section main\">\n\t\t\t\t<div className=\"hero is-primary\">\n\t\t\t\t\t<div className=\"hero-body is-bold\">\n\t\t\t\t\t\t<h1 className=\"title\">Tasks</h1>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box\">\n          <TaskForm addTask={addToDo} />\n          <TaskList todos={tasks} setCompleted={setCompleted} />\n\t\t\t\t</div>\n\t\t\t</section>\n  );\n}\n\nexport default Main;","import React from 'react';\nimport Main from './Components/Main';\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}